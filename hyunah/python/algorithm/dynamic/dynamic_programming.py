# 다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방식
# 이미 계산된 결과는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
# 다이나믹은 탑다운, 보텀업 두가지 방식이 있음
# 한번 해결한 문제를 다시 해결하지 않게 함으로써 성능을 키우고 시간 복잡도를 줄일 수 있다.

# 다이나믹 프로그래밍은 동적 계획법이라고도 한다.
# 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 것을 동적 할당이라고 하는데, 해당 다이나믹은 별 의미가 없다.

# 문제가 다음 조건을 만족할 때 사용됨
# 1. 최적 부분 구조(Optimal Substructure)
# 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있음
# 2. 중복되는 부분 문제(Overlapping Subproblem)
# 동일한 작은 문제를 반복적으로 해결해야한다.

# 피보나치 수열
# 인접한 항들 사이의 관계식을 의미한다.

def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1) + (x-2)


print(fibo(4))

# 위 방식으로 하면 중복되는 계산이 발생할 수 있다.

# 이러한 피보나치 수열에 어떻게 다이나믹 프로그래밍을 적용시킬까?
# 최적 부분 구조 : 큰 문제를 작은 문제로 나눌 수 있다.
# 중복되는 부분 문제 : 동일한 작은 문제를 반복적으로 해결

# 메모이제이션(Memoization)
# 한번 계산한 결과를 메모리 공간에 메모하는 기법

# 다이나믹 프로그래밍과 분할 정복의 차이점은 '부분 문제의 중복' 유무이다.
